---
import { StudioCMSRoutes } from 'studiocms:helpers/routemap';
import Config from 'virtual:studiocms/config';
import { getUserData } from '../../lib/user';
import { authEnvCheck } from '../../utils/authEnvCheck';
import AuthLayout from '../components/AuthLayout.astro';
import Button from '../components/Button.astro';
import TextInput from '../components/TextInput.astro';

const {
	dashboardConfig: {
		AuthConfig: {
			providers,
			providers: {
				usernameAndPassword,
				usernameAndPasswordConfig: { allowUserRegistration },
			},
		},
	},
} = Config;

const { SHOW_OAUTH } = await authEnvCheck(providers);

const {
	authLinks: { loginAPI, signupURL },
	mainLinks: { dashboardIndex },
} = StudioCMSRoutes;

let paragraph: string;

if (usernameAndPassword && SHOW_OAUTH) {
	paragraph = 'Create an account or log in using one of the options below.';
} else if (SHOW_OAUTH) {
	paragraph = 'Log in using one of the options below.';
} else {
	paragraph = 'No Login provider configured. Please contact your administrator.';
}

const user = await getUserData(Astro);

if (user.isLoggedIn) {
	return Astro.redirect(dashboardIndex);
}
---
<AuthLayout title="Signup Page" description="Signup Page">
    
    <div slot="header" class="form-header">
        <h1>Sign up</h1>
        <p>{paragraph}</p>
    </div>

    { usernameAndPassword && (
        <form class="form" id="signup-form" method="post" action={loginAPI}>
            <TextInput
                label='Username'
                id="username"
                type='text'
            />
            <TextInput
                label='Email'
                id="email"
                type='email'
            />
            <TextInput
                label='Display Name'
                id="display-name"
                type='text'
            />
            <TextInput
                label='Password'
                id="password"
                type='password'
            />
            <TextInput
                label='Confirm Password'
                id="confirm-password"
                type='password'
            />
            <Button type="submit" stretch>Create Account</Button>
        </form>
    )}

    { allowUserRegistration && (
        <p slot="footer">Already have an account? <a href={signupURL}>Sign in!</a></p>
    )}

</AuthLayout>

<script>
    import { toast } from '@studiocms/ui/components';
    const signupForm = document.getElementById('signup-form') as HTMLFormElement;

    signupForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        const formData = new FormData();

        const username = signupForm.querySelector('input[name="input-username"]') as HTMLInputElement;

        const email = signupForm.querySelector('input[name="input-email"]') as HTMLInputElement;

        const displayName = signupForm.querySelector('input[name="input-display-name"]') as HTMLInputElement;

        const password = signupForm.querySelector('input[name="input-password"]') as HTMLInputElement;

        const confirmPassword = signupForm.querySelector('input[name="input-confirm-password"]') as HTMLInputElement;

        if (password.value !== confirmPassword.value) {
            toast({
                title: 'Passwords do not match!',
                type: 'danger',
                description: 'Please make sure your passwords match.',
                closeButton: true,
                persistent: true,
            });
            return;
        }

        formData.append('username', username.value);
        formData.append('email', email.value);
        formData.append('displayname', displayName.value);
        formData.append('password', password.value);

        const response = await fetch(signupForm.action, {
            method: signupForm.method,
            body: formData,
        });

        if (response.ok) {
            toast({
                title: 'Signup successful!',
                type: 'success',
                description: 'Redirecting...',
            });
            setTimeout(() => {
                window.location.reload();
            }, 2000);
        } else {
            const data = await response.json();
            toast({
                title: 'Something went wrong!',
                type: 'danger',
                description: data.error,
                closeButton: true,
                persistent: true,
            });
        }
    });
</script>