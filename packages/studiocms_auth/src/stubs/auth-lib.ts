import DTSBuilder from '@matthiesenxyz/astrodtsbuilder';
import { createResolver } from 'astro-integration-kit';

const { resolve } = createResolver(import.meta.url);

const authLib = DTSBuilder();

authLib.addSingleLineNote(
	'This file is generated by StudioCMS and should not be modified manually.'
);

authLib.addModule('studiocms:auth/lib/encription', {
	namedExports: [
		{
			name: 'encrypt',
			typeDef: `typeof import('${resolve('../lib/encryption.ts')}').encrypt`,
		},
		{
			name: 'encryptString',
			typeDef: `typeof import('${resolve('../lib/encryption.ts')}').encryptString`,
		},
		{
			name: 'decrypt',
			typeDef: `typeof import('${resolve('../lib/encryption.ts')}').decrypt`,
		},
		{
			name: 'decryptToString',
			typeDef: `typeof import('${resolve('../lib/encryption.ts')}').decryptToString`,
		},
	],
});

authLib.addModule('studiocms:auth/lib/password', {
	namedExports: [
		{
			name: 'hashPassword',
			typeDef: `typeof import('${resolve('../lib/password.ts')}').hashPassword`,
		},
		{
			name: 'verifyPasswordHash',
			typeDef: `typeof import('${resolve('../lib/password.ts')}').verifyPasswordHash`,
		},
		{
			name: 'verifyPasswordStrength',
			typeDef: `typeof import('${resolve('../lib/password.ts')}').verifyPasswordStrength`,
		},
	],
});

authLib.addUnformattedString(`declare module 'studiocms:auth/lib/rate-limit' {
	export class RefillingTokenBucket<_Key> {
		public max: number;
		public refillIntervalSeconds: number;
		constructor(max: number, refillIntervalSeconds: number);
		private storage;
		public check(key: _Key, cost: number): boolean;
		public consume(key: _Key, cost: number): boolean;
	}

	export class Throttler<_Key> {
		public timeoutSeconds: number[];
		private storage;
		constructor(timeoutSeconds: number[]);
		public consume(key: _Key): boolean;
	}

	export class ExpiringTokenBucket<_Key> {
		public max: number;
		public expirationSeconds: number;
		constructor(max: number, expirationSeconds: number);
		private storage;
		public check(key: _Key, cost: number): boolean;
		public consume(key: _Key, cost: number): boolean;
	}
}`);

authLib.addModule('studiocms:auth/lib/session', {
	namedExports: [
		{
			name: 'generateSessionToken',
			typeDef: `typeof import('${resolve('../lib/session.ts')}').generateSessionToken`,
		},
		{
			name: 'sessionCookieName',
			typeDef: `typeof import('${resolve('../lib/session.ts')}').sessionCookieName`,
		},
		{
			name: 'createSession',
			typeDef: `typeof import('${resolve('../lib/session.ts')}').createSession`,
		},
		{
			name: 'validateSessionToken',
			typeDef: `typeof import('${resolve('../lib/session.ts')}').validateSessionToken`,
		},
		{
			name: 'invalidateSession',
			typeDef: `typeof import('${resolve('../lib/session.ts')}').invalidateSession`,
		},
		{
			name: 'setSessionTokenCookie',
			typeDef: `typeof import('${resolve('../lib/session.ts')}').setSessionTokenCookie`,
		},
		{
			name: 'deleteSessionTokenCookie',
			typeDef: `typeof import('${resolve('../lib/session.ts')}').deleteSessionTokenCookie`,
		},
		{
			name: 'setOAuthSessionTokenCookie',
			typeDef: `typeof import('${resolve('../lib/session.ts')}').setOAuthSessionTokenCookie`,
		},
		{
			name: 'makeExpirationDate',
			typeDef: `typeof import('${resolve('../lib/session.ts')}').makeExpirationDate`,
		},
		{
			name: 'sessionExpTime',
			typeDef: `typeof import('${resolve('../lib/session.ts')}').sessionExpTime`,
		},
		{
			name: 'createUserSession',
			typeDef: `typeof import('${resolve('../lib/session.ts')}').createUserSession`,
		},
	],
});

authLib.addModule('studiocms:auth/lib/types', {
	typeExports: [
		{
			name: 'UserTable',
			typeDef: `import('${resolve('../lib/types.ts')}').UserTable`,
		},
		{
			name: 'SessionTable',
			typeDef: `import('${resolve('../lib/types.ts')}').SessionTable`,
		},
		{
			name: 'OAuthAccountsTable',
			typeDef: `import('${resolve('../lib/types.ts')}').OAuthAccountsTable`,
		},
		{
			name: 'PermissionsTable',
			typeDef: `import('${resolve('../lib/types.ts')}').PermissionsTable`,
		},
		{
			name: 'UserSessionData',
			typeDef: `import('${resolve('../lib/types.ts')}').UserSessionData`,
		},
		{
			name: 'UserSession',
			typeDef: `import('${resolve('../lib/types.ts')}').UserSession`,
		},
		{
			name: 'SessionValidationResult',
			typeDef: `import('${resolve('../lib/types.ts')}').SessionValidationResult`,
		},
		{
			name: 'RefillBucket',
			typeDef: `import('${resolve('../lib/types.ts')}').RefillBucket`,
		},
		{
			name: 'ExpiringBucket',
			typeDef: `import('${resolve('../lib/types.ts')}').ExpiringBucket`,
		},
		{
			name: 'ThrottlingCounter',
			typeDef: `import('${resolve('../lib/types.ts')}').ThrottlingCounter`,
		},
	],
});

authLib.addModule('studiocms:auth/lib/user', {
	namedExports: [
		{
			name: 'verifyUsernameInput',
			typeDef: `typeof import('${resolve('../lib/user.ts')}').verifyUsernameInput`,
		},
		{
			name: 'createUserAvatar',
			typeDef: `typeof import('${resolve('../lib/user.ts')}').createUserAvatar`,
		},
		{
			name: 'createLocalUser',
			typeDef: `typeof import('${resolve('../lib/user.ts')}').createLocalUser`,
		},
		{
			name: 'createOAuthUser',
			typeDef: `typeof import('${resolve('../lib/user.ts')}').createOAuthUser`,
		},
		{
			name: 'updateUserPassword',
			typeDef: `typeof import('${resolve('../lib/user.ts')}').updateUserPassword`,
		},
		{
			name: 'getUserPasswordHash',
			typeDef: `typeof import('${resolve('../lib/user.ts')}').getUserPasswordHash`,
		},
		{
			name: 'getUserFromEmail',
			typeDef: `typeof import('${resolve('../lib/user.ts')}').getUserFromEmail`,
		},
		{
			name: 'getUserData',
			typeDef: `typeof import('${resolve('../lib/user.ts')}').getUserData`,
		},
		{
			name: 'permissionRanksMap',
			typeDef: `typeof import('${resolve('../lib/user.ts')}').permissionRanksMap`,
		},
		{
			name: 'verifyUserPermissionLevel',
			typeDef: `typeof import('${resolve('../lib/user.ts')}').verifyUserPermissionLevel`,
		},
		{
			name: 'LinkNewOAuthCookieName',
			typeDef: `typeof import('${resolve('../lib/user.ts')}').LinkNewOAuthCookieName`,
		},
	],
});

const dtsFile = authLib.makeAstroInjectedType('auth-lib.d.ts');

export default dtsFile;
